[{"/Users/carolinedavis/Desktop/log-project/src/index.js":"1","/Users/carolinedavis/Desktop/log-project/src/App.js":"2","/Users/carolinedavis/Desktop/log-project/src/reportWebVitals.js":"3","/Users/carolinedavis/Desktop/log-project/src/Utils/Helpers.js":"4","/Users/carolinedavis/Desktop/log-project/src/Components/Information.js":"5","/Users/carolinedavis/Desktop/log-project/src/Utils/Constants.js":"6"},{"size":500,"mtime":1610691621525,"results":"7","hashOfConfig":"8"},{"size":820,"mtime":1610934859768,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610666668207,"results":"10","hashOfConfig":"8"},{"size":2473,"mtime":1610934736633,"results":"11","hashOfConfig":"8"},{"size":363,"mtime":1610932203636,"results":"12","hashOfConfig":"8"},{"size":39,"mtime":1610933664758,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"7scbn9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/carolinedavis/Desktop/log-project/src/index.js",[],["29","30"],"/Users/carolinedavis/Desktop/log-project/src/App.js",[],"/Users/carolinedavis/Desktop/log-project/src/reportWebVitals.js",[],"/Users/carolinedavis/Desktop/log-project/src/Utils/Helpers.js",["31"],"import { url } from './Constants'\n\n// takes the string and splits it into an array by log entry\nexport function stringToArray(value) {\n    const splitString = value.split(/\\n/g)\n    const formattedString = splitString.map((stringSection) => {\n        return `${stringSection}`\n    })\n    return formattedString\n}\n\n// takes the array and extracts only the necessary data from the log\nexport function extractData(values) {\n\n    let ipAddresses = []\n    let datesVisited = []\n    let urlAddresses = []\n\n    for (const value of values) {\n        if (value) {\n            ipAddresses.push(value.split(/[ ]/)[0])\n            datesVisited.push(value.split(/\\[(.*?)\\]/)[1])\n            urlAddresses.push(value.split(/(.*?)\"/)[3].split(' ')[1].replace(url, \"\"))\n        }\n    }\n    return { ipAddresses, datesVisited, urlAddresses }\n}\n\n// counts and returns only the unique ips\nexport function countUniqueIps(data) {\n    {\n        const ips = new Set(data.ipAddresses)\n        return ips.size\n    }\n}\n\n// takes the urls then adds them to an object and counts/sorts them by most visited\nexport function countTopThreeUrls(data) {\n\n    const urlCount = data.urlAddresses.reduce((prev, curr) => {\n        const url = curr.includes('redirect') || curr.includes('moved') ? 'redirect' : curr\n        if (prev[url]) {\n            prev[url].count += 1\n        } else {\n            prev[url] = { url, count: 1 }\n        }\n        return prev\n    }, {})\n\n    const urlsSorted = Object.values(urlCount).sort(function (a, b) {\n        return b.count - a.count\n    }).slice(0, 3).map((item) => item.url).join(', ')\n\n    return urlsSorted\n}\n\n// takes the urls and ips then adds them to an object and counts/sorts ips by most visited\nexport function countTopThreeIps(data) {\n\n    const ips = data.ipAddresses\n    const urls = data.urlAddresses\n\n    const ipsAndUrls = ips.map((ip, index) => {\n        return { ip: ip, url: urls[index] }\n    })\n    const filteredIpsAndUrls = ipsAndUrls.filter((ip) => {\n        return !ip.url.includes(\".js\") || ip.url.includes(\".css\")\n    })\n\n    const ipCount = filteredIpsAndUrls.reduce((prev, curr) => {\n        if (prev[curr.ip]) {\n            prev[curr.ip].count += 1\n        } else {\n            prev[curr.ip] = { ip: curr.ip, count: 1 }\n        }\n        return prev\n    }, {})\n\n    const sortedIps = Object.values(ipCount).sort(function (a, b) {\n        return b.count - a.count\n    }).slice(0, 3).map((item) => item.ip).join(', ')\n\n    return sortedIps\n}\n","/Users/carolinedavis/Desktop/log-project/src/Components/Information.js",["32"],"import React from 'react';\n\nexport default ({ uniqueIps, topUrls, topIps }) => {\n    return (\n        <>\n            <div><b>The number of unique IP addresses:</b> {uniqueIps}</div>\n            <div><b>The top 3 most visited URLs:</b> {topUrls}</div>\n            <div><b>The top 3 most active IP (based on websites visited):</b> {topIps}</div>\n        </>\n    )\n}","/Users/carolinedavis/Desktop/log-project/src/Utils/Constants.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":31,"column":5,"nodeType":"39","messageId":"40","endLine":34,"endColumn":6},{"ruleId":"41","severity":1,"message":"42","line":3,"column":1,"nodeType":"43","endLine":11,"endColumn":2},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]